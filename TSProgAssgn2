## This function caches an inverse of a matrix and 
## stores this in the cache and returns the inverse

makeCacheMatrix <- function(x = matrix()) {
     cache_mat <<- matrix(nrow = nrow(x), ncol = ncol(x))
     cache_mat <<- NULL
     inv_x <- solve(x)
     inv_x
}

## This function computes the inverse of the special
## matrix" returned by `makeCacheMatrix` above. If the inverse has
## already been calculated (and the matrix has not changed), then the
## `cachesolve` should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
     if(is.null(cache_mat)) {
          cache_mat <<- solve(x)
          return(cache_mat)
     }
     
     message("getting cached data")
     return(cache_mat)
}